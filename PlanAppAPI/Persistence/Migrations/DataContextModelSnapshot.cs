// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Tables.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Symptoms")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Treatments")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("tblDiseases", (string)null);
                });

            modelBuilder.Entity("Domain.Tables.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HumidityLevel")
                        .HasColumnType("integer");

                    b.Property<int>("IrrigationAmount")
                        .HasColumnType("integer");

                    b.Property<string>("LightNeed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModTemp")
                        .HasColumnType("integer");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SoilType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WateringFrequency")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("tblPlants", (string)null);
                });

            modelBuilder.Entity("Domain.Tables.SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiseaseId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlantId")
                        .HasColumnType("integer");

                    b.Property<string>("SensorSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("PlantId");

                    b.HasIndex("UserId");

                    b.ToTable("tblSensorData", (string)null);
                });

            modelBuilder.Entity("Domain.Tables.SensorDataLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Moisture")
                        .HasColumnType("integer");

                    b.Property<int>("SensorDataId")
                        .HasColumnType("integer");

                    b.Property<int>("SoilMoisture")
                        .HasColumnType("integer");

                    b.Property<int>("Temperature")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SensorDataId");

                    b.ToTable("tblSensorLogs", (string)null);
                });

            modelBuilder.Entity("Domain.Tables.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tblUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Tables.SensorData", b =>
                {
                    b.HasOne("Domain.Tables.Disease", "Diseases")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Tables.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Tables.User", "User")
                        .WithMany("SensorData")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Diseases");

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Tables.SensorDataLog", b =>
                {
                    b.HasOne("Domain.Tables.SensorData", "SensorData")
                        .WithMany("SensorDataLogs")
                        .HasForeignKey("SensorDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SensorData");
                });

            modelBuilder.Entity("Domain.Tables.SensorData", b =>
                {
                    b.Navigation("SensorDataLogs");
                });

            modelBuilder.Entity("Domain.Tables.User", b =>
                {
                    b.Navigation("SensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
